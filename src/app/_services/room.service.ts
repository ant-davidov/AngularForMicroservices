//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { environment } from './../../environments/environment';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class RoomService {

    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject("API_ROOM_URL") private baseUrl:string ,private http: HttpClient) {
    
    }

    /**
     * @return Success
     */
    roomGET(id: number): Observable<RoomDTO> {
        let url_ = this.baseUrl + "/api/Room/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoomGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoomGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoomDTO>;
        }));
    }

    protected processRoomGET(response: HttpResponseBase): Observable<RoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    roomPUT(id: number, body: UpdateRoomDTO | undefined): Observable<RoomDTO> {
        let url_ = this.baseUrl + "/api/Room/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoomPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoomPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoomDTO>;
        }));
    }

    protected processRoomPUT(response: HttpResponseBase): Observable<RoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException(_responseText, status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    roomDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Room/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoomDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoomDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRoomDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param buildongId (optional) 
     * @param floor (optional) 
     * @param roomType (optional) 
     * @param skip (optional) 
     * @param size (optional) 
     * @return Success
     */
    search(buildongId: number | undefined, floor: number | undefined, roomType: RoomType | undefined, skip: number | undefined, size: number | undefined): Observable<SearchRoomResponse> {
        let url_ = this.baseUrl + "/api/Room/Search?";
        if (buildongId === null)
            throw new Error("The parameter 'buildongId' cannot be null.");
        else if (buildongId !== undefined)
            url_ += "buildongId=" + encodeURIComponent("" + buildongId) + "&";
        if (floor === null)
            throw new Error("The parameter 'floor' cannot be null.");
        else if (floor !== undefined)
            url_ += "floor=" + encodeURIComponent("" + floor) + "&";
        if (roomType === null)
            throw new Error("The parameter 'roomType' cannot be null.");
        else if (roomType !== undefined)
            url_ += "roomType=" + encodeURIComponent("" + roomType) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchRoomResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchRoomResponse>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<SearchRoomResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchRoomResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    roomPOST(body: CreateRoomDTO | undefined): Observable<RoomDTO> {
        let url_ = this.baseUrl + "/api/Room";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRoomPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRoomPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoomDTO>;
        }));
    }

    protected processRoomPOST(response: HttpResponseBase): Observable<RoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                
            return throwException(_responseText, status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    building(): Observable<BuildingDTO[]> {
        let url_ = this.baseUrl + "/api/Room/building";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBuilding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBuilding(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BuildingDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BuildingDTO[]>;
        }));
    }

    protected processBuilding(response: HttpResponseBase): Observable<BuildingDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BuildingDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Building implements IBuilding {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    floors?: number;

    constructor(data?: IBuilding) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.floors = _data["floors"];
        }
    }

    static fromJS(data: any): Building {
        data = typeof data === 'object' ? data : {};
        let result = new Building();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["floors"] = this.floors;
        return data;
    }
}

export interface IBuilding {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    floors?: number;
}

export class BuildingDTO implements IBuildingDTO {
    id?: number;
    name?: string | undefined;

    constructor(data?: IBuildingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BuildingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BuildingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IBuildingDTO {
    id?: number;
    name?: string | undefined;
}

export class CreateRoomDTO implements ICreateRoomDTO {
    buildingId?: number;
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;

    constructor(data?: ICreateRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buildingId = _data["buildingId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.capacity = _data["capacity"];
            this.floor = _data["floor"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): CreateRoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buildingId"] = this.buildingId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["capacity"] = this.capacity;
        data["floor"] = this.floor;
        data["number"] = this.number;
        return data;
    }
}

export interface ICreateRoomDTO {
    buildingId?: number;
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;
}

export class RoomDTO implements IRoomDTO {
    id?: number;
    buildingId?: number;
    building?: Building;
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;

    constructor(data?: IRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.buildingId = _data["buildingId"];
            this.building = _data["building"] ? Building.fromJS(_data["building"]) : <any>undefined;
            this.name = _data["name"];
            this.type = _data["type"];
            this.capacity = _data["capacity"];
            this.floor = _data["floor"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): RoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["buildingId"] = this.buildingId;
        data["building"] = this.building ? this.building.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["type"] = this.type;
        data["capacity"] = this.capacity;
        data["floor"] = this.floor;
        data["number"] = this.number;
        return data;
    }
}

export interface IRoomDTO {
    id?: number;
    buildingId?: number;
    building?: Building;
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;
}

export enum RoomType {
    Lecture = "Lecture",
    Practice = "Practice",
    Gym = "Gym",
    Other = "Other",
}

export class SearchRoomResponse implements ISearchRoomResponse {
    rooms?: RoomDTO[] | undefined;
    pageCount?: number;

    constructor(data?: ISearchRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(RoomDTO.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
        }
    }

    static fromJS(data: any): SearchRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        return data;
    }
}

export interface ISearchRoomResponse {
    rooms?: RoomDTO[] | undefined;
    pageCount?: number;
}

export class UpdateRoomDTO implements IUpdateRoomDTO {
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;

    constructor(data?: IUpdateRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.capacity = _data["capacity"];
            this.floor = _data["floor"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): UpdateRoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["capacity"] = this.capacity;
        data["floor"] = this.floor;
        data["number"] = this.number;
        return data;
    }
}

export interface IUpdateRoomDTO {
    name?: string | undefined;
    type?: RoomType;
    capacity?: number;
    floor?: number;
    number?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}